"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BundleStatsWebpackPlugin = void 0;
var _webpack = _interopRequireDefault(require("webpack"));
var _lodash = require("lodash");
var _cliUtils = require("@bundle-stats/cli-utils");
var CONFIG = _interopRequireWildcard(require("./config"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const DEFAULT_OPTIONS = {
  baseline: Boolean(process.env.BUNDLE_STATS_BASELINE),
  stats: {
    assets: true,
    chunks: true,
    modules: true,
    hash: true,
    builtAt: true
  }
};
const PLUGIN_NAME = 'BundleStats';
const isWebpack5 = parseInt(_webpack.default.version, 10) === 5;
class BundleStatsWebpackPlugin {
  constructor(options) {
    this.options = options;
  }
  apply(compiler) {
    const options = (0, _lodash.merge)({}, DEFAULT_OPTIONS, this.options);
    if (isWebpack5) {
      compiler.hooks.thisCompilation.tap(PLUGIN_NAME, compilation => {
        compilation.hooks.processAssets.tapPromise({
          name: PLUGIN_NAME,
          stage: _webpack.default.Compilation.PROCESS_ASSETS_STAGE_REPORT
        }, async () => {
          var _compilation$options, _compilation$options$;
          const newAssets = await (0, _cliUtils.generateReports)(compilation.getStats().toJson(options.stats), options, {
            outputPath: compilation === null || compilation === void 0 ? void 0 : (_compilation$options = compilation.options) === null || _compilation$options === void 0 ? void 0 : (_compilation$options$ = _compilation$options.output) === null || _compilation$options$ === void 0 ? void 0 : _compilation$options$.path,
            invalidOptionsUrl: CONFIG.OPTIONS_URL,
            logger: compilation.getInfrastructureLogger && compilation.getInfrastructureLogger(PLUGIN_NAME)
          });
          Object.entries(newAssets).forEach(([filename, source]) => {
            compilation.emitAsset(filename, new _webpack.default.sources.RawSource(source), {
              development: true
            });
          });
        });
      });
      return;
    }
    compiler.hooks.emit.tapAsync(PLUGIN_NAME, async (compilation, callback) => {
      var _compilation$options2, _compilation$options3;
      const newAssets = await (0, _cliUtils.generateReports)(compilation.getStats().toJson(options.stats), options, {
        outputPath: compilation === null || compilation === void 0 ? void 0 : (_compilation$options2 = compilation.options) === null || _compilation$options2 === void 0 ? void 0 : (_compilation$options3 = _compilation$options2.output) === null || _compilation$options3 === void 0 ? void 0 : _compilation$options3.path,
        invalidOptionsUrl: CONFIG.OPTIONS_URL,
        logger: compilation.getInfrastructureLogger && compilation.getInfrastructureLogger(PLUGIN_NAME)
      });
      Object.entries(newAssets).forEach(([filename, source]) => {
        // eslint-disable-next-line no-param-reassign
        compilation.assets[filename] = {
          size: () => 0,
          source: () => source
        };
      });
      callback();
    });
  }
}
exports.BundleStatsWebpackPlugin = BundleStatsWebpackPlugin;