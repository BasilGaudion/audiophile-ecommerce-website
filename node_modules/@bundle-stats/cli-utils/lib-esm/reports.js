import path from 'path';
import merge from 'lodash/merge';
import { createJobs, createReport } from '@bundle-stats/utils';
import filter from '@bundle-stats/plugin-webpack-filter';
import validate from '@bundle-stats/plugin-webpack-validate';
import * as TEXT from './text';
import { createArtifacts } from './create-artifacts';
import { getBaselineStatsFilepath, readBaseline } from './baseline';
export function getReportInfo(report) {
    var _a, _b, _c;
    return (_c = (_b = (_a = report === null || report === void 0 ? void 0 : report.insights) === null || _a === void 0 ? void 0 : _a.webpack) === null || _b === void 0 ? void 0 : _b.assetsSizeTotal) === null || _c === void 0 ? void 0 : _c.data;
}
const DEFAULT_OPTIONS = {
    compare: true,
    baseline: Boolean(process.env.BUNDLE_STATS_BASELINE),
    html: true,
    json: false,
    outDir: '',
    silent: false,
};
export const generateReports = async (source, options, pluginOptions = {}) => {
    const { compare, baseline, html, json, outDir } = merge({}, DEFAULT_OPTIONS, options);
    const { invalidOptionsUrl: invalidParamsUrl, outputPath, logger = console } = pluginOptions;
    const newAssets = {};
    const invalid = validate(source);
    if (invalid) {
        logger.warn([invalid, invalidParamsUrl].join('\n'));
    }
    const data = filter(source);
    if (!data.builtAt) {
        data.builtAt = Date.now();
    }
    const baselineFilepath = getBaselineStatsFilepath(outputPath);
    let baselineStats = null;
    try {
        if (compare) {
            const baselineStatsData = await readBaseline();
            baselineStats = filter(baselineStatsData);
            if (!options.silent)
                logger.info(`Read baseline from ${baselineFilepath}`);
        }
    }
    catch (err) {
        logger.warn(TEXT.PLUGIN_BASELINE_MISSING_WARN);
    }
    const jobs = createJobs([
        { webpack: data },
        ...(compare && baselineStats ? [{ webpack: baselineStats }] : []),
    ]);
    const report = createReport(jobs);
    const artifacts = createArtifacts(jobs, report, { html, json });
    Object.values(artifacts).forEach(({ filename, output }) => {
        const filepath = path.join(outDir, filename);
        newAssets[filepath] = output;
    });
    if (baseline) {
        newAssets[baselineFilepath] = JSON.stringify(data);
        if (!options.silent)
            logger.info(`Write baseline data to ${baselineFilepath}`);
    }
    const info = getReportInfo(report);
    if (info && !options.silent) {
        logger.info(info.text);
    }
    return newAssets;
};
//# sourceMappingURL=reports.js.map