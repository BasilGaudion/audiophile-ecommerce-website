"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReports = exports.getReportInfo = void 0;
const path_1 = __importDefault(require("path"));
const merge_1 = __importDefault(require("lodash/merge"));
const utils_1 = require("@bundle-stats/utils");
const plugin_webpack_filter_1 = __importDefault(require("@bundle-stats/plugin-webpack-filter"));
const plugin_webpack_validate_1 = __importDefault(require("@bundle-stats/plugin-webpack-validate"));
const TEXT = __importStar(require("./text"));
const create_artifacts_1 = require("./create-artifacts");
const baseline_1 = require("./baseline");
function getReportInfo(report) {
    return report?.insights?.webpack?.assetsSizeTotal?.data;
}
exports.getReportInfo = getReportInfo;
const DEFAULT_OPTIONS = {
    compare: true,
    baseline: Boolean(process.env.BUNDLE_STATS_BASELINE),
    html: true,
    json: false,
    outDir: '',
    silent: false,
};
const generateReports = async (source, options, pluginOptions = {}) => {
    const { compare, baseline, html, json, outDir } = (0, merge_1.default)({}, DEFAULT_OPTIONS, options);
    const { invalidOptionsUrl: invalidParamsUrl, outputPath, logger = console } = pluginOptions;
    const newAssets = {};
    const invalid = (0, plugin_webpack_validate_1.default)(source);
    if (invalid) {
        logger.warn([invalid, invalidParamsUrl].join('\n'));
    }
    const data = (0, plugin_webpack_filter_1.default)(source);
    if (!data.builtAt) {
        data.builtAt = Date.now();
    }
    const baselineFilepath = (0, baseline_1.getBaselineStatsFilepath)(outputPath);
    let baselineStats = null;
    try {
        if (compare) {
            const baselineStatsData = await (0, baseline_1.readBaseline)();
            baselineStats = (0, plugin_webpack_filter_1.default)(baselineStatsData);
            if (!options.silent)
                logger.info(`Read baseline from ${baselineFilepath}`);
        }
    }
    catch (err) {
        logger.warn(TEXT.PLUGIN_BASELINE_MISSING_WARN);
    }
    const jobs = (0, utils_1.createJobs)([
        { webpack: data },
        ...(compare && baselineStats ? [{ webpack: baselineStats }] : []),
    ]);
    const report = (0, utils_1.createReport)(jobs);
    const artifacts = (0, create_artifacts_1.createArtifacts)(jobs, report, { html, json });
    Object.values(artifacts).forEach(({ filename, output }) => {
        const filepath = path_1.default.join(outDir, filename);
        newAssets[filepath] = output;
    });
    if (baseline) {
        newAssets[baselineFilepath] = JSON.stringify(data);
        if (!options.silent)
            logger.info(`Write baseline data to ${baselineFilepath}`);
    }
    const info = getReportInfo(report);
    if (info && !options.silent) {
        logger.info(info.text);
    }
    return newAssets;
};
exports.generateReports = generateReports;
//# sourceMappingURL=reports.js.map