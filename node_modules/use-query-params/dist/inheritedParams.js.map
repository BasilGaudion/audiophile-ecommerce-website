{
  "version": 3,
  "sources": ["../src/inheritedParams.ts"],
  "sourcesContent": ["import {\n  QueryParamConfig,\n  QueryParamConfigMap,\n  StringParam,\n} from 'serialize-query-params';\nimport { QueryParamOptions } from './options';\nimport { QueryParamConfigMapWithInherit } from './types';\n\n/**\n * Convert inherit strings from a query param config to actual\n * parameters based on predefined ('inherited') mappings.\n * Defaults to StringParam.\n */\nexport function convertInheritedParamStringsToParams(\n  paramConfigMapWithInherit: QueryParamConfigMapWithInherit,\n  options: QueryParamOptions\n): QueryParamConfigMap {\n  const paramConfigMap: QueryParamConfigMap = {};\n  let hasInherit = false;\n\n  const hookKeys = Object.keys(paramConfigMapWithInherit);\n  let paramKeys = hookKeys;\n\n  // include known params if asked for explicitly, or no params were configured and we didn't\n  // explicitly say not to\n  const includeKnownParams =\n    options.includeKnownParams ||\n    (options.includeKnownParams !== false && hookKeys.length === 0);\n\n  if (includeKnownParams) {\n    const knownKeys = Object.keys(options.params ?? {});\n    paramKeys.push(...knownKeys);\n  }\n\n  for (const key of paramKeys) {\n    const param = paramConfigMapWithInherit[key];\n    // does it have an existing parameter definition? use it\n    if (param != null && typeof param === 'object') {\n      paramConfigMap[key] = param;\n      continue;\n    }\n\n    // otherwise, we have to inherit or use the default\n    hasInherit = true;\n\n    // default is StringParam\n    paramConfigMap[key] = options.params?.[key] ?? StringParam;\n  }\n\n  // if we didn't inherit anything, just return the input\n  if (!hasInherit) return paramConfigMapWithInherit as QueryParamConfigMap;\n\n  return paramConfigMap;\n}\n\n/**\n * Extends a config to include params for all specified keys,\n * defaulting to StringParam if not found in the inheritedParams\n * map.\n */\nexport function extendParamConfigForKeys(\n  baseParamConfigMap: QueryParamConfigMap,\n  paramKeys: string[],\n  inheritedParams?: QueryParamOptions['params'] | undefined,\n  defaultParam?: QueryParamConfig<any> | undefined\n) {\n  // if we aren't inheriting anything or there are no params, return the input\n  if (!inheritedParams || !paramKeys.length) return baseParamConfigMap;\n\n  let paramConfigMap = { ...baseParamConfigMap };\n  let hasInherit = false;\n  for (const paramKey of paramKeys) {\n    // if it is missing a parameter, fill it in\n    if (!Object.prototype.hasOwnProperty.call(paramConfigMap, paramKey)) {\n      paramConfigMap[paramKey] = inheritedParams[paramKey] ?? defaultParam;\n      hasInherit = true;\n    }\n  }\n\n  if (!hasInherit) return baseParamConfigMap;\n  return paramConfigMap;\n}\n"],
  "mappings": "AAAA;AAAA,EAGE;AAAA,OACK;AASA,SAAS,qCACd,2BACA,SACqB;AAhBvB;AAiBE,QAAM,iBAAsC,CAAC;AAC7C,MAAI,aAAa;AAEjB,QAAM,WAAW,OAAO,KAAK,yBAAyB;AACtD,MAAI,YAAY;AAIhB,QAAM,qBACJ,QAAQ,sBACP,QAAQ,uBAAuB,SAAS,SAAS,WAAW;AAE/D,MAAI,oBAAoB;AACtB,UAAM,YAAY,OAAO,MAAK,aAAQ,WAAR,YAAkB,CAAC,CAAC;AAClD,cAAU,KAAK,GAAG,SAAS;AAAA,EAC7B;AAEA,aAAW,OAAO,WAAW;AAC3B,UAAM,QAAQ,0BAA0B;AAExC,QAAI,SAAS,QAAQ,OAAO,UAAU,UAAU;AAC9C,qBAAe,OAAO;AACtB;AAAA,IACF;AAGA,iBAAa;AAGb,mBAAe,QAAO,mBAAQ,WAAR,mBAAiB,SAAjB,YAAyB;AAAA,EACjD;AAGA,MAAI,CAAC;AAAY,WAAO;AAExB,SAAO;AACT;AAOO,SAAS,yBACd,oBACA,WACA,iBACA,cACA;AAjEF;AAmEE,MAAI,CAAC,mBAAmB,CAAC,UAAU;AAAQ,WAAO;AAElD,MAAI,iBAAiB,EAAE,GAAG,mBAAmB;AAC7C,MAAI,aAAa;AACjB,aAAW,YAAY,WAAW;AAEhC,QAAI,CAAC,OAAO,UAAU,eAAe,KAAK,gBAAgB,QAAQ,GAAG;AACnE,qBAAe,aAAY,qBAAgB,cAAhB,YAA6B;AACxD,mBAAa;AAAA,IACf;AAAA,EACF;AAEA,MAAI,CAAC;AAAY,WAAO;AACxB,SAAO;AACT;",
  "names": []
}
