{
  "version": 3,
  "sources": ["../src/memoSearchStringToObject.ts"],
  "sourcesContent": ["import { EncodedQuery } from 'serialize-query-params';\nimport shallowEqual from './shallowEqual';\nimport { deserializeUrlNameMap } from './urlName';\n\nlet cachedSearchString: string | undefined;\nlet cachedUrlNameMapString: string | undefined;\nlet cachedSearchStringToObjectFn:\n  | ((searchString: string) => EncodedQuery)\n  | undefined;\nlet cachedParsedQuery: EncodedQuery = {};\n\n/**\n * cached conversion of ?foo=1&bar=2 to { foo: '1', bar: '2' }\n */\nexport const memoSearchStringToObject = (\n  searchStringToObject: (searchString: string) => EncodedQuery,\n  searchString?: string | undefined,\n  /** optionally provide a mapping string to handle renames via `urlName`\n   * mapping are separated by \\n and mappings are urlName\\0paramName\n   */\n  urlNameMapStr?: string | undefined\n) => {\n  // if we have a cached version, just return it\n  if (\n    cachedSearchString === searchString &&\n    cachedSearchStringToObjectFn === searchStringToObject &&\n    cachedUrlNameMapString === urlNameMapStr\n  ) {\n    return cachedParsedQuery;\n  }\n\n  cachedSearchString = searchString;\n  cachedSearchStringToObjectFn = searchStringToObject;\n  const newParsedQuery = searchStringToObject(searchString ?? '');\n  cachedUrlNameMapString = urlNameMapStr;\n\n  const urlNameMap = deserializeUrlNameMap(urlNameMapStr);\n\n  // keep old values for keys if they are the same\n  for (let [key, value] of Object.entries(newParsedQuery)) {\n    // handle url name mapping\n    if (urlNameMap?.[key]) {\n      delete newParsedQuery[key];\n      key = urlNameMap[key];\n      newParsedQuery[key] = value;\n    }\n\n    const oldValue = cachedParsedQuery[key];\n    if (shallowEqual(value, oldValue)) {\n      newParsedQuery[key] = oldValue;\n    }\n  }\n\n  cachedParsedQuery = newParsedQuery;\n  return newParsedQuery;\n};\n"],
  "mappings": "AACA,OAAO,kBAAkB;AACzB,SAAS,6BAA6B;AAEtC,IAAI;AACJ,IAAI;AACJ,IAAI;AAGJ,IAAI,oBAAkC,CAAC;AAKhC,MAAM,2BAA2B,CACtC,sBACA,cAIA,kBACG;AAEH,MACE,uBAAuB,gBACvB,iCAAiC,wBACjC,2BAA2B,eAC3B;AACA,WAAO;AAAA,EACT;AAEA,uBAAqB;AACrB,iCAA+B;AAC/B,QAAM,iBAAiB,qBAAqB,sCAAgB,EAAE;AAC9D,2BAAyB;AAEzB,QAAM,aAAa,sBAAsB,aAAa;AAGtD,WAAS,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,cAAc,GAAG;AAEvD,QAAI,yCAAa,MAAM;AACrB,aAAO,eAAe;AACtB,YAAM,WAAW;AACjB,qBAAe,OAAO;AAAA,IACxB;AAEA,UAAM,WAAW,kBAAkB;AACnC,QAAI,aAAa,OAAO,QAAQ,GAAG;AACjC,qBAAe,OAAO;AAAA,IACxB;AAAA,EACF;AAEA,sBAAoB;AACpB,SAAO;AACT;",
  "names": []
}
