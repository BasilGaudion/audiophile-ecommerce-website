{
  "version": 3,
  "sources": ["../src/withQueryParams.tsx"],
  "sourcesContent": ["import * as React from 'react';\nimport { QueryParamConfigMap, DecodedValueMap } from 'serialize-query-params';\nimport useQueryParams from './useQueryParams';\nimport { SetQuery } from './types';\n\ntype Omit<T, K> = Pick<T, Exclude<keyof T, K>>;\ntype Diff<T, K> = Omit<T, keyof K>;\n\nexport interface InjectedQueryProps<QPCMap extends QueryParamConfigMap> {\n  query: DecodedValueMap<QPCMap>;\n  setQuery: SetQuery<QPCMap>;\n}\n\n/**\n * HOC to provide query parameters via props `query` and `setQuery`\n * NOTE: I couldn't get type to automatically infer generic when\n * using the format withQueryParams(config)(component), so I switched\n * to withQueryParams(config, component).\n * See: https://github.com/microsoft/TypeScript/issues/30134\n */\nexport function withQueryParams<\n  QPCMap extends QueryParamConfigMap,\n  P extends InjectedQueryProps<QPCMap>\n>(paramConfigMap: QPCMap, WrappedComponent: React.ComponentType<P>) {\n  // return a FC that takes props excluding query and setQuery\n  const Component: React.FC<Diff<P, InjectedQueryProps<QPCMap>>> = (props) => {\n    const [query, setQuery] = useQueryParams(paramConfigMap);\n\n    // see https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046 for why `...props as P`\n    return (\n      <WrappedComponent query={query} setQuery={setQuery} {...(props as any)} />\n    );\n  };\n  Component.displayName = `withQueryParams(${\n    WrappedComponent.displayName || WrappedComponent.name || 'Component'\n  })`;\n\n  return Component;\n}\n\nexport default withQueryParams;\n\n/**\n * HOC to provide query parameters via props mapToProps (similar to\n * react-redux connect style mapStateToProps)\n * NOTE: I couldn't get type to automatically infer generic when\n * using the format withQueryParams(config)(component), so I switched\n * to withQueryParams(config, component).\n * See: https://github.com/microsoft/TypeScript/issues/30134\n */\nexport function withQueryParamsMapped<\n  QPCMap extends QueryParamConfigMap,\n  MappedProps extends object,\n  P extends MappedProps\n>(\n  paramConfigMap: QPCMap,\n  mapToProps: (\n    query: DecodedValueMap<QPCMap>,\n    setQuery: SetQuery<QPCMap>,\n    props: Diff<P, MappedProps>\n  ) => MappedProps,\n  WrappedComponent: React.ComponentType<P>\n) {\n  // return a FC that takes props excluding query and setQuery\n  const Component: React.FC<Diff<P, MappedProps>> = (props) => {\n    const [query, setQuery] = useQueryParams(paramConfigMap);\n    const propsToAdd = mapToProps(query, setQuery, props);\n\n    // see https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046 for why `...props as P`\n    return <WrappedComponent {...propsToAdd} {...(props as P)} />;\n  };\n  Component.displayName = `withQueryParams(${\n    WrappedComponent.displayName || WrappedComponent.name || 'Component'\n  })`;\n\n  return Component;\n}\n"],
  "mappings": "AAAA,YAAY,WAAW;AAEvB,OAAO,oBAAoB;AAkBpB,SAAS,gBAGd,gBAAwB,kBAA0C;AAElE,QAAM,YAA2D,CAAC,UAAU;AAC1E,UAAM,CAAC,OAAO,QAAQ,IAAI,eAAe,cAAc;AAGvD,WACE,oCAAC;AAAA,MAAiB;AAAA,MAAc;AAAA,MAAqB,GAAI;AAAA,KAAe;AAAA,EAE5E;AACA,YAAU,cAAc,mBACtB,iBAAiB,eAAe,iBAAiB,QAAQ;AAG3D,SAAO;AACT;AAEA,IAAO,0BAAQ;AAUR,SAAS,sBAKd,gBACA,YAKA,kBACA;AAEA,QAAM,YAA4C,CAAC,UAAU;AAC3D,UAAM,CAAC,OAAO,QAAQ,IAAI,eAAe,cAAc;AACvD,UAAM,aAAa,WAAW,OAAO,UAAU,KAAK;AAGpD,WAAO,oCAAC;AAAA,MAAkB,GAAG;AAAA,MAAa,GAAI;AAAA,KAAa;AAAA,EAC7D;AACA,YAAU,cAAc,mBACtB,iBAAiB,eAAe,iBAAiB,QAAQ;AAG3D,SAAO;AACT;",
  "names": []
}
